/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module compact_shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [7:0] alufn_signal,
        output reg [31:0] shift
    );
    logic [31:0] R_0a296e54_i;
    logic [31:0] RR_0a296e54_i;
    logic [31:0] R_0b4be0a2_i;
    logic [31:0] RR_0b4be0a2_i;
    logic [31:0] M_left_shifter_a;
    logic [4:0] M_left_shifter_b;
    logic M_left_shifter_pad;
    logic [31:0] M_left_shifter_shift;
    
    shifter left_shifter (
        .a(M_left_shifter_a),
        .b(M_left_shifter_b),
        .pad(M_left_shifter_pad),
        .shift(M_left_shifter_shift)
    );
    
    
    localparam _MP_SIZE_594238616 = 6'h20;
    logic [31:0] M_reverser1_in;
    logic [31:0] M_reverser1_reversed;
    
    bit_reverser #(
        .SIZE(_MP_SIZE_594238616)
    ) reverser1 (
        .in(M_reverser1_in),
        .reversed(M_reverser1_reversed)
    );
    
    
    localparam _MP_SIZE_716756729 = 6'h20;
    logic [31:0] M_reverser2_in;
    logic [31:0] M_reverser2_reversed;
    
    bit_reverser #(
        .SIZE(_MP_SIZE_716756729)
    ) reverser2 (
        .in(M_reverser2_in),
        .reversed(M_reverser2_reversed)
    );
    
    
    logic [31:0] M_mux1_s0;
    logic [31:0][1:0] M_mux1_in;
    logic [31:0] M_mux1_out;
    
    genvar idx_0_726077242;
    
    generate
        for (idx_0_726077242 = 0; idx_0_726077242 < 32; idx_0_726077242 = idx_0_726077242 + 1) begin: forLoop_idx_0_726077242
            mux_2 mux1 (
                .s0(M_mux1_s0[idx_0_726077242]),
                .in(M_mux1_in[idx_0_726077242]),
                .out(M_mux1_out[idx_0_726077242])
            );
        end
    endgenerate
    
    
    logic [31:0] M_mux2_s0;
    logic [31:0][1:0] M_mux2_in;
    logic [31:0] M_mux2_out;
    
    genvar idx_0_1395671516;
    
    generate
        for (idx_0_1395671516 = 0; idx_0_1395671516 < 32; idx_0_1395671516 = idx_0_1395671516 + 1) begin: forLoop_idx_0_1395671516
            mux_2 mux2 (
                .s0(M_mux2_s0[idx_0_1395671516]),
                .in(M_mux2_in[idx_0_1395671516]),
                .out(M_mux2_out[idx_0_1395671516])
            );
        end
    endgenerate
    
    
    logic M_padding_s0;
    logic [1:0] M_padding_in;
    logic M_padding_out;
    
    mux_2 padding (
        .s0(M_padding_s0),
        .in(M_padding_in),
        .out(M_padding_out)
    );
    
    
    always @* begin
        M_reverser1_in = a;
        for (RR_0a296e54_i = 0; RR_0a296e54_i < 6'h20; RR_0a296e54_i = RR_0a296e54_i + 1) begin
      R_0a296e54_i = (1'h0) + RR_0a296e54_i * (1'h1);
            M_mux1_in[R_0a296e54_i][1'h0] = a[R_0a296e54_i];
            M_mux1_in[R_0a296e54_i][1'h1] = M_reverser1_reversed[R_0a296e54_i];
            M_mux1_s0[R_0a296e54_i] = alufn_signal[1'h0];
            M_left_shifter_a[R_0a296e54_i] = M_mux1_out[R_0a296e54_i];
        end
        M_left_shifter_b = b;
        M_padding_in[1'h0] = 1'h0;
        M_padding_in[1'h1] = a[5'h1f];
        M_padding_s0 = alufn_signal[1'h1];
        M_left_shifter_pad = M_padding_out;
        M_reverser2_in = M_left_shifter_shift;
        for (RR_0b4be0a2_i = 0; RR_0b4be0a2_i < 6'h20; RR_0b4be0a2_i = RR_0b4be0a2_i + 1) begin
      R_0b4be0a2_i = (1'h0) + RR_0b4be0a2_i * (1'h1);
            M_mux2_in[R_0b4be0a2_i][1'h0] = M_left_shifter_shift[R_0b4be0a2_i];
            M_mux2_in[R_0b4be0a2_i][1'h1] = M_reverser2_reversed[R_0b4be0a2_i];
            M_mux2_s0[R_0b4be0a2_i] = alufn_signal[1'h0];
            shift[R_0b4be0a2_i] = M_mux2_out[R_0b4be0a2_i];
        end
    end
    
    
endmodule