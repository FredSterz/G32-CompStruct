module alu_manual_tester#(
    CLK_FREQ ~ 1000 : CLK_FREQ > 0
)(
    input clk,  // clock
    input rst, // reset
    input io_button[5], // 5 buttons on IO Shield
    input io_dip[3][8], // DIP switches on IO Shield
    output led[8], // 8 user controllable LEDs
    output io_led[3][8], // LEDs on IO Shield
    output io_segment[8], // 7-Segment LEDs on IO Shield
    output io_select[4] // Digit Select on IO Shield
) {
    alu alu
    test_cases test_cases(#SIZE(40))
    sig slow_clock
    bin_to_dec pass_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    bin_to_dec error_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 6 for sim, 16 on hardware
    const SLOW_CLOCK_DEFAULT_SPEED = $is_sim() ? 8 : 25 // put 8  for sim, 25 for hardware
    
    enum States {
        IDLE,
        A1, // enter in back 16 bits of a
        A2, // enter in front 16 bits of a
        B1, // enter in back 16 bits of b
        B2, // enter in front 16 bits of b
        IDLE2,
        RUN,
        SCORE,
        SHOWA, // show stored value of A
        SHOWB, // show stored value of B
        SHOWALUFN, // show stored value of ALUFN
        CALC, // display output of ALU
        RESULT, // display pass/fail counter
        STOP
    }
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        
        // instantiate 5 edge detectors, one for each button 
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))
        // instantiate 1 edge detector for slow clock
        edge_detector slow_clock_edge(#RISE(1), #FALL(0))
        // instantiate 5 conditioners, one for each button
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{1000}})) 
        
        
        .rst(rst) {
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV))
            dff states[$width(States)](#INIT(States.IDLE))
            dff state_counter[4](#INIT(1))
            dff a[32](#INIT(0))
            dff b[32](#INIT(0))
            
            dff test_sel[6](#INIT(0))
            dff pass_counter[8](#INIT(0))
            dff error_counter[8](#INIT(0))
            
            dff counter[32]
            dff speed_pointer[$clog2(32)](#INIT(SLOW_CLOCK_DEFAULT_SPEED))
            dff slow_clock_enable(#INIT(0))
            
            dff alufn_signal[8](#INIT(0))
            dff aluout[32](#INIT(0))
        }
    }
    
    
    always {
        // condition the buttons, then take rising edges only
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        
        // connect state dff
        states.d = states.q
        state_counter.d = state_counter.q
        
        // test case related dffs
        test_sel.d = test_sel.q
        pass_counter.d = pass_counter.q
        pass_renderer.value = pass_counter.q
        error_counter.d = error_counter.q
        error_renderer.value = error_counter.q
        
        // internal dffs to store a, b and alufn before passing into alu
        a.d = a.q
        b.d = b.q
        alufn_signal.d = alufn_signal.q
        aluout.d = aluout.q
        
        speed_pointer.d = speed_pointer.q
        counter.d = counter.q + 1 // always increment
        slow_clock_enable.d = slow_clock_enable.q
        
        // alu connection, initialise a and b
        alu.a = a.q
        alu.b = b.q
        alu.alufn_signal = alufn_signal.q
        aluout.d = alu.out
        
        // leftmost section of IO dip switches, from right to left
        
        
        // All LEDs are set to off
        led = 8h0
        io_led = 3x{{8h0}}
        
        // 7 segment display value, it will display z,v,n
        seg.values = {4b0, 4b0, 4b0, 4b0}
        io_segment = ~seg.seg
        // 4 sections of 7 segment leds
        io_select = ~seg.sel
        
        // signal connection
        slow_clock = counter.q[speed_pointer.q] // pointed based on the bit of the counter
        
        // picking test case
        test_cases.test_sel = test_sel.q
        
        // this is a mux deciding whether we stop the clock or set it with certain speed 
        case (slow_clock_enable.q){
            0:
                slow_clock_edge.in = 0 // always don't increment or decrement
            1: 
                slow_clock_edge.in = slow_clock 
            default:
                slow_clock_edge.in = 0
        }
        case (states.q){
            States.IDLE:
                if (io_dip[2][7]) {
                    aluout.d[0] = ~aluout.q[0]
                }
                alu.alufn_signal = io_dip[2][7:0]
                // this takes precedence, placed as the first clause
                seg.values = {c{3b0,alu.z}, c{3b0,alu.v}, c{3b0,alu.n}, 4b0}
                led = alu.out[7:0] // first 8 bits
                io_led = $build(alu.out[31:8], 3) //next 24 bits
                if (io_button_edge.out[0]) {
                    states.d = States.A1
                } else if(io_button_edge.out[2]) {
                    states.d = States.B1
                } else if(io_button_edge.out[3]) {
                    states.d = States.IDLE2
                }
            States.A1:
                a.d[7:0] = io_dip[0] // Read back 8 bits
                a.d[15:8] = io_dip[1] // Read front 8 bits
                led = a.q[7:0] // first 8 bits
                io_led = $build(a.q[31:8], 3) //next 24 bits
                if (io_button_edge.out[1]) {
                    states.d = States.A2 // Move to States.A2
                }
            States.A2:
                a.d[23:16] = io_dip[0] // Read back 8 bits
                a.d[31:24] = io_dip[1] // Read front 8 bits
                led = a.q[7:0] // first 8 bits
                io_led = $build(a.q[31:8], 3) //next 24 bits
                if (io_button_edge.out[1]) {
                    states.d = States.IDLE  // Move to States.IDLE
                }
            States.B1:
                b.d[7:0] = io_dip[0] // Read back 8 bits
                b.d[15:8] = io_dip[1] // Read front 8 bits
                led = b.q[7:0] // first 8 bits
                io_led = $build(b.q[31:8], 3) //next 24 bits
                if (io_button_edge.out[1]) {
                    states.d = States.B2  // Move to States.B2
                }
            States.B2:
                b.d[23:16] = io_dip[0] // Read back 8 bits
                b.d[31:24] = io_dip[1] // Read front 8 bits
                led = b.q[7:0] // first 8 bits
                io_led = $build(b.q[31:8], 3) //next 24 bits
                if (io_button_edge.out[1]) {
                    states.d = States.IDLE  // Move to States.END
                }
            States.IDLE2:
                // this takes precedence
                // if slow clock rising edge, go to UPDATE state
                led = 8h0
                io_led = 3x{{8h0}}
                seg.values = c{pass_renderer.digits[1:0], error_renderer.digits[1:0]}
                if (slow_clock_edge.out) { // this takes precedence
                    if (test_sel.q == 40) {
                        states.d =States.STOP
                    } else {
                        test_sel.d = test_sel.q + 1
                        states.d = States.SCORE
                    }
                    // if button[1] is pressed
                } else if(io_button_edge.out[1]) {
                    // if slow clock is currently not enabled, run
                    if (~|slow_clock_enable.q){
                        states.d = States.RUN
                    } else { // else, slow clock is currently enabled, stop
                        states.d = States.STOP
                    }
                }
            States.SCORE:
                seg.values = $build(c{10b0, test_sel.q}, 4)
                // return to IDLE
                if (slow_clock_edge.out) {
                    states.d = States.SHOWALUFN // Move to States.A2
                }
            
            States.RUN:
                // handle slow clock, next cycle set to 1
                slow_clock_enable.d = 1
                // return to IDLE
                states.d = States.IDLE2
            
            States.STOP:
                // handle slow clock, next cycle set to 0
                slow_clock_enable.d = 0
                // return to IDLE
                states.d = States.IDLE2
            
            States.SHOWALUFN:
                state_counter.d = 1
                seg.values = {4b0, 4b0, 4b0, state_counter.q}
                // b.d[15:0] = $flatten(io_dip[1:0]) // Read first 16 bits
                // Display 6 bits of ALUFN
                alufn_signal.d = test_cases.alufn_test[7:0]
                led = 8h0
                io_led[2] = test_cases.alufn_test
                if (slow_clock_edge.out) {
                    states.d = States.SHOWA  // Move to States.B2
                }
            
            States.SHOWA:
                state_counter.d = 2
                seg.values = {4b0, 4b0, 4b0, state_counter.q}
                // a.d[15:0] = $flatten(io_dip[1:0]) // Read first 16 bits
                a.d = test_cases.a_test
                // Display 32 bits of a
                led = a.q[7:0]
                io_led = $build(a.q[31:8],3)
                if (slow_clock_edge.out) {
                    states.d = States.SHOWB // Move to States.A2
                }
            
            States.SHOWB:
                state_counter.d = 3
                seg.values = {4b0, 4b0, 4b0, state_counter.q}
                // b.d[15:0] = $flatten(io_dip[1:0]) // Read first 16 bits
                // Display 32 bits of b
                b.d = test_cases.b_test
                led = b.q[7:0]
                io_led = $build(b.q[31:8],3)
                if (slow_clock_edge.out) {
                    states.d = States.CALC  // Move to States.B2
                }
            
            States.CALC:
                state_counter.d = 4
                if (io_dip[2][7]) {
                    aluout.d[0] = ~aluout.q[0]
                }
                seg.values = {c{3b0,alu.z}, c{3b0,alu.v}, c{3b0,alu.n}, state_counter.q}
                led = aluout.q[7:0] // first 8 bits
                io_led = $build(aluout.q[31:8],3)
                if (slow_clock_edge.out) {
                    states.d = States.RESULT  // Move to States.IDLE
                }
            
            States.RESULT:
                state_counter.d = 5
                seg.values = {c{3b0,test_cases.zvn[2]}, c{3b0,test_cases.zvn[1]}, c{3b0,test_cases.zvn[0]}, state_counter.q}
                if (io_dip[2][7]) {
                    aluout.d[0] = ~aluout.q[0]
                }
                led = test_cases.result[7:0] // first 8 bits
                io_led = $build(test_cases.result[31:8],3) // next 32 bits
                if (slow_clock_edge.out) {
                    if ((aluout.q == test_cases.result) & (c{alu.z,alu.v,alu.n} == test_cases.zvn)) {
                        pass_counter.d = pass_counter.q + 1
                    } else {
                        error_counter.d = error_counter.q + 1
                    }
                    states.d = States.IDLE2  // Move to States.IDLE
                }

        }
    }
}